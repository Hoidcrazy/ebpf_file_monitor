#!/bin/bash

# 测试运行脚本模板
# 此文件将被 CMake 配置生成实际的测试脚本

set -e

# 项目路径
PROJECT_ROOT="@CMAKE_SOURCE_DIR@"
BUILD_DIR="@CMAKE_BINARY_DIR@"
TEST_PROGRAM="$BUILD_DIR/tests/test_basic"

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# 检查测试程序是否存在
check_test_program() {
    if [ ! -f "$TEST_PROGRAM" ]; then
        print_error "测试程序未找到: $TEST_PROGRAM"
        print_info "请先运行构建脚本: $PROJECT_ROOT/scripts/build.sh"
        exit 1
    fi
    
    if [ ! -x "$TEST_PROGRAM" ]; then
        print_warning "测试程序没有可执行权限，正在修复..."
        chmod +x "$TEST_PROGRAM"
    fi
}

# 创建必要目录
create_directories() {
    mkdir -p "$PROJECT_ROOT/tests/log"
    mkdir -p "$PROJECT_ROOT/tests/test_docs"
}

# 运行测试
run_test() {
    print_info "开始运行基础功能测试..."
    print_info "测试程序: $TEST_PROGRAM"
    
    cd "$PROJECT_ROOT"
    
    # 运行测试程序
    if "$TEST_PROGRAM" "$@"; then
        print_success "测试执行完成"
        return 0
    else
        print_error "测试执行失败"
        return 1
    fi
}

# 显示帮助
show_help() {
    echo "用法: $0 [选项]"
    echo ""
    echo "选项:"
    echo "  -h, --help     显示帮助信息"
    echo "  -v, --verbose  详细输出模式"
    echo ""
    echo "注意:"
    echo "  1. 请确保已启动 eBPF 监控程序"
    echo "  2. 测试结果将输出到 tests/log/ 目录"
    echo "  3. 测试文件位于 tests/test_docs/ 目录"
}

# 主函数
main() {
    # 解析参数
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -v|--verbose)
                VERBOSE=true
                shift
                ;;
            *)
                break
                ;;
        esac
    done
    
    print_info "eBPF 文件监控系统测试脚本"
    
    # 执行测试步骤
    check_test_program
    create_directories
    
    # 运行测试
    if run_test "$@"; then
        print_success "所有测试完成"
        exit 0
    else
        print_error "测试失败"
        exit 1
    fi
}

# 运行主函数
main "$@"